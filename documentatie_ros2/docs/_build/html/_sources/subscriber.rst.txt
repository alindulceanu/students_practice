Making a ros2 subscriber
=========================


```python
class Subscriber(Node):
```

- The code defines a Python class called `Subscriber`. This class is derived from the `Node` class, which allows it to function as a ROS2 node.

Initialization Method
~~~~~~~~~~~~~~~~~~~~~

```python
    def __init__(self, topic: str):
```

- Within the `Subscriber` class, the `__init__` method serves as the constructor. It is called when you create an instance of the class. This method accepts one argument, `topic`, which represents the ROS2 topic to subscribe to.

```python
        super().__init__("subscriber")
```

- This line invokes the constructor of the parent class, `Node`, to initialize the ROS2 node. The argument `"subscriber"` is the name of the node.

Callback Function
~~~~~~~~~~~~~~~~

```python
    def pose_callback(self, msg: Twist):
```

- The `pose_callback` method is a callback function that is executed whenever a new message is received on the subscribed ROS2 topic. This method accepts one argument, `msg`, which is a `Twist` message containing linear and angular velocities.

```python
        self.get_logger().info("Transfered")
```

- Within the callback, this line logs a message to the console indicating that a message has been received. It uses the `get_logger()` method to access the logger associated with the ROS2 node.

```python
        row = {"TOPIC": self.topic, "LX": msg.linear.x, "LY": msg.linear.y, "LZ": msg.linear.z, "AX": msg.angular.x, "AY": msg.angular.y, "AZ": msg.angular.z, 'msg': msg}
```

- This line constructs a dictionary called `row` that contains various fields extracted from the received `Twist` message. It includes information such as the topic name, linear and angular velocities, and the original message itself.

```python
        self.df.loc[len(self.df)] = row
```

- This line appends the `row` dictionary to a Pandas DataFrame called `df`. The DataFrame is used to accumulate and store data from received messages.

```python
        print(self.df.to_string())
```

- Here, the code prints the entire DataFrame to the console, displaying the collected data for debugging and monitoring purposes.

```python
        self.df.to_csv()
```

- Finally, this line saves the DataFrame to a CSV file. However, it's important to note that this line may produce an error because the `to_csv()` method requires specifying the CSV file path. You should provide a valid file path to save the data properly.

Main Function
~~~~~~~~~~~~~

```python
def main(args=None):
    rclpy.init(args=args)
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("input", help="add topic")
    args = parser.parse_args()
    node = Subscriber(str(args.input))
    rclpy.spin(node)
    rclpy.shutdown()
```

- The `main` function serves as the entry point for the script.

```python
    rclpy.init(args=args)
```

- This line initializes the ROS2 client library using `rclpy.init()`. The `args` parameter allows you to pass command-line arguments to ROS2, if necessary.

```python
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("input", help="add topic")
    args = parser.parse_args()
```

- Here, an argument parser is set up to handle command-line arguments. It expects one argument, `"input"`, which represents the topic name.

```python
    node = Subscriber(str(args.input))
```

- An instance of the `Subscriber` class is created, passing the specified topic name as an argument.

```python
    rclpy.spin(node)
```

- The script enters the ROS2 spin loop using `rclpy.spin(node)`. This loop allows the node to continuously listen for and process incoming messages.

```python
    rclpy.shutdown()
```

- After the spin loop is terminated (e.g., when you manually stop the script), `rclpy.shutdown()` is called to gracefully shut down the ROS2 node.

Execution
---------

To execute this script, follow these steps:

1. Run the script from the command line, providing the desired ROS2 topic as an argument:

   ```
   python script_name.py topic_name
   ```

   Replace `script_name.py` with the actual name of your Python script, and `topic_name` with the name of the ROS2 topic you want to subscribe to.

2. The script will subscribe to the specified ROS2 topic and start recording incoming messages' data.

3. It will log messages to the console, including the data received from the subscribed topic.

4. The script will also save the recorded data to a CSV file for further analysis.

Note: Ensure that you have the necessary ROS2 packages and dependencies installed for the script to work correctly. Additionally, consider providing a valid file path when saving the data to a CSV file in the `pose_callback` method.
```
